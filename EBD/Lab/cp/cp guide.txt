Sure, here are the detailed steps to control the mouse cursor using MPU 6050 and Raspberry Pi:

Connect the MPU 6050 to the Raspberry Pi:

Connect the VCC and GND pins of the MPU 6050 to the 5V and GND pins of the Raspberry Pi, respectively.
Connect the SDA and SCL pins of the MPU 6050 to the SDA and SCL pins of the Raspberry Pi, respectively. These pins are used for I2C communication between the two devices.
You may also need to enable I2C on the Raspberry Pi using the raspi-config tool.
Install the necessary software:

Install the smbus2 Python library using the following command: sudo pip install smbus2
Install the Adafruit-GPIO Python library using the following command: sudo pip install Adafruit-GPIO
Install the pyautogui Python library using the following command: sudo pip install pyautogui
Install the xdotool package using the following command: sudo apt-get install xdotool
Write a Python script to read data from the MPU 6050:

Import the necessary libraries: smbus2, time, and math.

Initialize the I2C bus using the smbus2.SMBus() function.

Initialize the MPU 6050 using the I2C bus and the following code:

scss
Copy code
bus.write_byte_data(addr, power_mgmt_1, 0)
where addr is the I2C address of the MPU 6050 (usually 0x68), and power_mgmt_1 is a register that controls the power management settings of the device.

Read the raw accelerometer and gyroscope data from the MPU 6050 using the following code:

scss
Copy code
def read_word(reg):
    high = bus.read_byte_data(addr, reg)
    low = bus.read_byte_data(addr, reg+1)
    val = (high << 8) + low
    return val

accel_x = read_word(0x3b)
accel_y = read_word(0x3d)
accel_z = read_word(0x3f)
gyro_x = read_word(0x43)
gyro_y = read_word(0x45)
gyro_z = read_word(0x47)
These values are in raw format and need to be converted to meaningful units.

Calculate the movement of the sensor in X and Y directions:

Convert the raw accelerometer and gyroscope data to meaningful units using the following code:

makefile
Copy code
accel_x = accel_x / 16384.0
accel_y = accel_y / 16384.0
accel_z = accel_z / 16384.0
gyro_x = gyro_x / 131.0
gyro_y = gyro_y / 131.0
gyro_z = gyro_z / 131.0
These values are in units of g (acceleration) and deg/s (angular velocity).

Calculate the tilt angle in X and Y directions using the following code:

lua
Copy code
roll = math.atan2(accel_y, accel_z) * 180 / math.pi
pitch = math.atan2(-accel_x, math.sqrt(accel_y * accel_y + accel_z * accel_z)) * 180 / math.pi
These values are in degrees.

Calculate the rotation rate in X and Y directions using the